<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ERKOS Security - Dashboard</title>
    <link rel="stylesheet" href="/css/dashboard.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="header-left">
            <button class="menu-button" onclick="toggleSidebar()">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <line x1="3" y1="6" x2="21" y2="6"></line>
                    <line x1="3" y1="12" x2="21" y2="12"></line>
                    <line x1="3" y1="18" x2="21" y2="18"></line>
                </svg>
            </button>
            <span class="menu-text">MENU</span>
        </div>

        <div class="header-center">
            <div class="logo">
                <img src="/images/erkos.png" alt="ERKOS Logo" width="40" height="40">
            </div>
            <div class="brand-info">
                <h1 class="brand-name">ERKOS</h1>
                <p class="brand-subtitle">SECURITY</p>
            </div>
        </div>

        <div class="header-right">
            <div class="time-filter">
                <select id="timeFilter" onchange="updateTimeFilter()">
                    <option value="24">Today</option>
                    <option value="168">This Week</option>
                    <option value="720">This Month</option>
                    <option value="8760">This Year</option>
                </select>
            </div>
            <button class="logout-button" onclick="logout()">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
                    <polyline points="16,17 21,12 16,7"></polyline>
                    <line x1="21" y1="12" x2="9" y2="12"></line>
                </svg>
            </button>
            <span class="logout-text">LOGOUT</span>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-content">
        <div class="dashboard-grid">
            <!-- Parking Utilization Rate Card -->
            <div class="metric-card parking-utilization-card">
                <div class="card-header">
                    <h3>Parking Utilization Rate</h3>
                    <button class="options-button">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="12" cy="12" r="1"></circle>
                            <circle cx="19" cy="12" r="1"></circle>
                            <circle cx="5" cy="12" r="1"></circle>
                        </svg>
                    </button>
                </div>
                <div class="card-content">
                    <div class="parking-visual">
                        <div class="chart-container small">
                            <canvas id="parkingChart"></canvas>
                        </div>
                        <div class="parking-stats">
                            <div class="main-metric">
                                <span class="metric-value" id="totalSpots"><%= stats.totalSpots || 0 %></span>
                                <span class="metric-label">Total Spots</span>
                            </div>
                            <div class="legend small">
                                <div class="legend-item">
                                    <span class="legend-color available"></span>
                                    <span>Spots Available: <span id="availablePercent"><%= 100 - (stats.parkingUtilization.percentage || 0) %>%</span></span>
                                </div>
                                <div class="legend-item">
                                    <span class="legend-color occupied"></span>
                                    <span>Spots Occupied: <span id="occupiedPercent"><%= stats.parkingUtilization.percentage || 0 %>%</span></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Average Stay Time Card -->
            <div class="metric-card average-stay-time-card">
                <div class="card-header">
                    <h3>Average Stay Time</h3>
                    <button class="options-button">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="12" cy="12" r="1"></circle>
                            <circle cx="19" cy="12" r="1"></circle>
                            <circle cx="5" cy="12" r="1"></circle>
                        </svg>
                    </button>
                </div>
                <div class="card-content">
                    <div class="stay-time-metrics">
                        <div class="stay-time-item">
                            <div class="icon-container cars">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M14 16H9m10 0h3v-3.15a1 1 0 0 0-.84-.99L16 11l-2.7-3.6a1 1 0 0 0-.8-.4H8.5a1 1 0 0 0-.8.4L5 11l-5.16 1.86a1 1 0 0 0-.84.99V16h3m0 0a2 2 0 1 0 4 0m10 0a2 2 0 1 0 4 0"></path>
                                </svg>
                            </div>
                            <div class="metric-details">
                                <span class="metric-label">Cars</span>
                                <span class="metric-value" id="carsStayTime"><%= stats.averageStayTime.cars || 0 %></span>
                                <span class="metric-unit">Hours</span>
                            </div>
                        </div>
                        <div class="stay-time-item">
                            <div class="icon-container people">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                                    <circle cx="12" cy="7" r="4"></circle>
                                </svg>
                            </div>
                            <div class="metric-details">
                                <span class="metric-label">People</span>
                                <span class="metric-value" id="peopleStayTime">1012</span>
                                <span class="metric-unit">Persons</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Foot Traffic Card -->
            <div class="metric-card foot-traffic-card">
                <div class="card-header">
                    <h3>Foot Traffic (Int)</h3>
                    <button class="options-button">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="12" cy="12" r="1"></circle>
                            <circle cx="19" cy="12" r="1"></circle>
                            <circle cx="5" cy="12" r="1"></circle>
                        </svg>
                    </button>
                </div>
                <div class="card-content">
                    <div class="foot-traffic-visual">
                        <div class="foot-traffic-icon">
                            <svg width="80" height="80" viewBox="0 0 100 100" fill="none">
                                <circle cx="50" cy="50" r="40" fill="#E6FFFA" stroke="#38B2AC" stroke-width="2"/>
                                <path d="M35 45L40 50L35 55M50 35V65M65 45L60 50L65 55" stroke="#38B2AC" stroke-width="3" stroke-linecap="round"/>
                                <circle cx="30" cy="30" r="8" fill="#38B2AC" opacity="0.7"/>
                                <circle cx="70" cy="30" r="6" fill="#38B2AC" opacity="0.5"/>
                                <circle cx="30" cy="70" r="6" fill="#38B2AC" opacity="0.5"/>
                                <circle cx="70" cy="70" r="8" fill="#38B2AC" opacity="0.7"/>
                            </svg>
                        </div>
                        <div class="foot-traffic-stats">
                            <div class="main-metric">
                                <span class="metric-value" id="footTrafficCount"><%= stats.footTraffic || 0 %></span>
                                <span class="metric-label">People</span>
                            </div>
                            <div class="trend-indicator positive">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <polyline points="23,6 13.5,15.5 8.5,10.5 1,18"></polyline>
                                    <polyline points="17,6 23,6 23,12"></polyline>
                                </svg>
                                <span>4% (30 days)</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Infringement Rate Card -->
            <div class="metric-card infringement-rate-card">
                <div class="card-header">
                    <h3>Infringement Rate</h3>
                    <button class="options-button">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="12" cy="12" r="1"></circle>
                            <circle cx="19" cy="12" r="1"></circle>
                            <circle cx="5" cy="12" r="1"></circle>
                        </svg>
                    </button>
                </div>
                <div class="card-content">
                    <div class="infringement-visual">
                        <div class="chart-container small">
                            <canvas id="infringementChart"></canvas>
                        </div>
                        <div class="infringement-stats">
                            <div class="main-metric">
                                <span class="metric-value" id="infringementCount"><%= stats.infringements.count || 0 %></span>
                                <span class="metric-label">Total Hours</span>
                            </div>
                            <div class="legend small">
                                <div class="legend-item">
                                    <span class="legend-color tracked"></span>
                                    <span>Total Car Tracked Time: <span id="trackedPercent"><%= 100 - (stats.infringements.rate || 0) %>%</span></span>
                                </div>
                                <div class="legend-item">
                                    <span class="legend-color infractions"></span>
                                    <span>Infractions: <span id="infractionsPercent"><%= stats.infringements.rate || 0 %>%</span></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Infringement Table Section -->
    <div class="table-section">
        <div class="table-header">
            <h2>Recent Infractions</h2>
            <div class="table-controls">
                <button id="refreshTable" class="refresh-btn">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="23 4 23 10 17 10"></polyline>
                        <polyline points="1 20 1 14 7 14"></polyline>
                        <path d="m3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"></path>
                    </svg>
                    Refresh
                </button>
            </div>
        </div>
        <div class="table-container">
            <table id="infractionsTable" class="infractions-table">
                <thead>
                    <tr>
                        <th>Car ID</th>
                        <th>License Plate</th>
                        <th>Duration (Min)</th>
                        <th>Parking Spot</th>
                        <th>Minutes Parked</th>
                        <th>Infraction Type</th>
                        <th>Detection Time</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="infractionsTableBody">
                    <!-- Table rows will be populated by JavaScript -->
                </tbody>
            </table>
            <div id="noInfractions" class="no-data" style="display: none;">
                <div class="no-data-icon">
                    <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                        <circle cx="12" cy="12" r="10"></circle>
                        <path d="m9 12 2 2 4-4"></path>
                    </svg>
                </div>
                <h3>No Active Infractions</h3>
                <p>All violations have been resolved or no infractions detected in the selected time period.</p>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer class="footer">
        <p>&copy; 2024 • ERKOS SECURITY</p>
    </footer>

    <script>
        // Initialize charts
        let parkingChart, infringementChart;

        // Dashboard data with safe defaults
        const dashboardData = {
            parkingUtilization: {
                used: <%= stats.parkingUtilization.used || 0 %>,
                available: <%= stats.parkingUtilization.available || 0 %>,
                percentage: <%= stats.parkingUtilization.percentage || 0 %>
            },
            averageStayTime: {
                cars: <%= stats.averageStayTime.cars || 0 %>,
                people: <%= stats.averageStayTime.people || 0 %>
            },
            footTraffic: <%= stats.footTraffic || 0 %>,
            infringements: {
                count: <%= stats.infringements.count || 0 %>,
                rate: <%= stats.infringements.rate || 0 %>
            },
            totalSpots: <%= stats.totalSpots || 0 %>
        };

        // Initialize parking utilization chart
        function initParkingChart() {
            const canvas = document.getElementById('parkingChart');
            if (!canvas) {
                console.error('Parking chart canvas not found');
                return;
            }
            const ctx = canvas.getContext('2d');
            parkingChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Spots Available', 'Spots Occupied'],
                    datasets: [{
                        data: [dashboardData.parkingUtilization.available, dashboardData.parkingUtilization.used],
                        backgroundColor: ['#E2E8F0', '#38B2AC'],
                        borderWidth: 2,
                        borderColor: '#FFFFFF',
                        cutout: '65%'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.parsed;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                                    return `${label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
        }

        // Initialize infringement chart
        function initInfringementChart() {
            const canvas = document.getElementById('infringementChart');
            if (!canvas) {
                console.error('Infringement chart canvas not found');
                return;
            }
            const ctx = canvas.getContext('2d');
            infringementChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Normal Time', 'Infractions'],
                    datasets: [{
                        data: [100 - dashboardData.infringements.rate, dashboardData.infringements.rate],
                        backgroundColor: ['#E2E8F0', '#38B2AC'],
                        borderWidth: 0,
                        cutout: '70%'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });
        }

        // Update dashboard data
        async function updateDashboard(hours = 24) {
            try {
                const response = await fetch(`/dashboard/api/stats?hours=${hours}`);
                const data = await response.json();
                
                // Update parking chart
                if (parkingChart) {
                    parkingChart.data.datasets[0].data = [data.parkingUtilization.available, data.parkingUtilization.used];
                    parkingChart.update();
                }
                
                // Update infringement chart
                if (infringementChart) {
                    infringementChart.data.datasets[0].data = [100 - data.infringements.rate, data.infringements.rate];
                    infringementChart.update();
                }
                
                // Update text values safely
                const updateElement = (id, value) => {
                    const element = document.getElementById(id);
                    if (element) {
                        element.textContent = value;
                    }
                };

                updateElement('totalSpots', data.totalSpots || 0);
                updateElement('availablePercent', `${100 - (data.parkingUtilization.percentage || 0)}%`);
                updateElement('occupiedPercent', `${data.parkingUtilization.percentage || 0}%`);
                updateElement('carsStayTime', data.averageStayTime.cars || 0);
                updateElement('footTrafficCount', data.footTraffic || 0);
                updateElement('infringementCount', data.infringements.count || 0);
                updateElement('trackedPercent', `${100 - (data.infringements.rate || 0)}%`);
                updateElement('infractionsPercent', `${data.infringements.rate || 0}%`);
                
            } catch (error) {
                console.error('Error updating dashboard:', error);
            }
        }

        // Time filter change handler
        function updateTimeFilter() {
            const hours = document.getElementById('timeFilter').value;
            updateDashboard(hours);
        }

        // Logout function
        function logout() {
            window.location.href = '/auth/logout';
        }

        // Sidebar toggle (placeholder)
        function toggleSidebar() {
            // Implement sidebar toggle functionality if needed
            console.log('Sidebar toggle clicked');
        }

        // Load infraction table data
        async function loadInfractionTable() {
            try {
                const hours = document.getElementById('timeFilter').value;
                const response = await fetch(`/dashboard/api/infractions?hours=${hours}`);
                const infractions = await response.json();
                
                const tableBody = document.getElementById('infractionsTableBody');
                const noDataDiv = document.getElementById('noInfractions');
                const table = document.getElementById('infractionsTable');
                
                if (infractions.length === 0) {
                    table.style.display = 'none';
                    noDataDiv.style.display = 'block';
                } else {
                    table.style.display = 'table';
                    noDataDiv.style.display = 'none';
                    
                    tableBody.innerHTML = infractions.map(infraction => `
                        <tr>
                            <td>${infraction.car_id || 'N/A'}</td>
                            <td>${infraction.licence_plate || 'N/A'}</td>
                            <td>${infraction.dur_in_minutes || 0}</td>
                            <td>${infraction.parking_spot || 'N/A'}</td>
                            <td>${infraction.minutes_parked || 0}</td>
                            <td>${infraction.infraction_type || 'N/A'}</td>
                            <td>${new Date(infraction.detection_time).toLocaleString() || 'N/A'}</td>
                            <td>
                                <button class="approve-btn" onclick="approveInfraction('${infraction.car_id}')">
                                    Approve
                                </button>
                            </td>
                        </tr>
                    `).join('');
                }
            } catch (error) {
                console.error('Error loading infraction table:', error);
            }
        }

        // Approve an infraction
        async function approveInfraction(carId) {
            try {
                const response = await fetch('/dashboard/api/approve', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ car_id: carId })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('Infraction approved successfully!');
                    loadInfractionTable(); // Reload the table
                } else {
                    alert('Failed to approve infraction: ' + (result.message || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error approving infraction:', error);
                alert('Error approving infraction');
            }
        }

        // Initialize everything when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initParkingChart();
            initInfringementChart();
            loadInfractionTable();
            
            // Add refresh button event listener
            document.getElementById('refreshTable').addEventListener('click', loadInfractionTable);
            
            // Auto-refresh every 30 seconds
            setInterval(() => {
                const currentHours = document.getElementById('timeFilter').value;
                updateDashboard(currentHours);
                loadInfractionTable();
            }, 30000);
        });
    </script>
</body>
</html>
